import io
import zipfile
from typing import Dict, Any

class ProtocolsIOExporter:
    """
    Handles the creation of a downloadable zip archive for protocols.io.
    """

    def _apply_markdown_hard_breaks(self, text: str) -> str:
        """
        Applies markdown hard line breaks (two spaces at the end of a line)
        to every non-empty line that is not inside a code block.
        """
        lines = text.split('\n')
        in_code_block = False
        new_lines = []
        for line in lines:
            # Toggle code block state
            if line.strip().startswith('```'):
                in_code_block = not in_code_block
            
            # Add two spaces to non-empty lines outside of code blocks
            if not in_code_block and line.strip():
                new_lines.append(line + '  ')
            else:
                new_lines.append(line)
        return '\n'.join(new_lines)

    def _generate_readme_content(
        self,
        user_goal: str,
        hardware_config: str,
        sop_markdown: str,
        workspace_url: str,
    ) -> str:
        """
        Generates the content for the protocol_details.md file in English.
        """
        # A simple way to create a title from the user goal
        protocol_title = f"AI-Generated Protocol for: {user_goal.capitalize()}"

        # Apply hard breaks to the hardware config list items
        materials_list = [f"* {line.strip()}" for line in hardware_config.strip().split('\n')]
        materials_section = self._apply_markdown_hard_breaks('\n'.join(materials_list))

        # Apply hard breaks to the SOP markdown
        steps_section = self._apply_markdown_hard_breaks(sop_markdown)

        readme_content = f"""
# Guide for Uploading to protocols.io

1.  Log in to your protocols.io account and click "New Protocol".
2.  Copy and paste the content below into the corresponding fields on the website.
3.  We recommend publishing this protocol to our LabscriptAI workspace. You can join using this link: {workspace_url}
4.  Finally, upload the `protocol_script.py` file (included in this zip) as an attachment to your protocol.

---

### **Title:**
{protocol_title}

---

### **Abstract:**
An automated laboratory protocol designed for the Opentrons platform to accomplish the following goal: '{user_goal}'. This protocol was generated by an AI assistant and is provided with an executable Python script.

---

### **Materials & Hardware:**
{materials_section}

---

### **Procedure/Steps:**
{steps_section}
"""
        return readme_content.strip()

    def create_export_zip(
        self,
        user_goal: str,
        hardware_config: str,
        sop_markdown: str,
        generated_code: str,
    ) -> bytes:
        """
        Creates a zip archive in-memory containing the protocol script and a readme.

        Returns:
            bytes: The content of the zip file.
        """
        workspace_url = "https://www.protocols.io/joinworkspace/labscriptai/TDSSYJZRPW"
        
        readme_content = self._generate_readme_content(
            user_goal, hardware_config, sop_markdown, workspace_url
        )

        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zip_file:
            # Add the readme file
            zip_file.writestr("protocol_details.md", readme_content.encode("utf-8"))
            # Add the python script file
            zip_file.writestr("protocol_script.py", generated_code.encode("utf-8"))
        
        # Rewind the buffer to the beginning
        zip_buffer.seek(0)
        return zip_buffer.read() 